rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =====================================================================
    // KULLANICI KOLEKSİYONU (/users) - GÜVENLİK DÜZELTMESİ
    // =====================================================================
    match /users/{userId} {
      // GÜVENLİK AÇIĞI KAPATILDI: Kullanıcılar sadece kendi özel verilerini okuyabilir.
      // Genel profil verileri (diğer kullanıcılar tarafından görülebilen) için /public_profiles koleksiyonu kullanılır.
      allow read: if request.auth.uid == userId;

      // NİHAİ GÜVENLİK GÜNCELLEMESİ: Genel 'write' izni, daha güvenli olan
      // 'create' ve 'update' izinleriyle değiştirildi.

      // Kullanıcı kendi profil belgesini oluşturabilir.
      allow create: if request.auth != null && request.auth.uid == userId;

      // Kullanıcı kendi profilini güncelleyebilir, ancak SADECE belirli alanları.
      // Bu kural, 'followerCount' ve 'followingCount' gibi sunucu tarafından y��netilen
      // alanların istemci tarafından manipüle edilmesini kesinlikle engeller.
      allow update: if request.auth != null && request.auth.uid == userId &&
                       request.resource.data.diff(resource.data).affectedKeys()
                       .hasOnly(['name', 'firstName', 'lastName', 'username', 'gender', 'dateOfBirth',
                                 'profileCompleted', 'tutorialCompleted', 'avatarStyle', 'avatarSeed',
                                 'selectedExam', 'selectedExamSection', 'weeklyAvailability', 'updatedAt',
                                 // Uygulama içi özelliği kullandı bilgisini tutar
                                 'usedFeatures',
                                 // Stratejik plan işaretleri
                                 'hasCreatedStrategicPlan', 'lastStrategyCreationDate']);

      // --- ALT KOLEKSİYONLAR ---
      match /daily_quests/{questId} {
        // Yalnızca sahibi okuyabilir
        allow read: if request.auth.uid == userId;
        // İstemci yeni görev oluşturamaz ve silemez (sunucu üretir)
        allow create, delete: if false;
        // İstemci güncellemeleri: yalnızca güvenli alt kümeler izinli
        allow update: if request.auth.uid == userId && (
          // (1) Sadece ilerleme artışı (+ isteğe bağlı birkaç alan)
          (
            request.resource.data.diff(resource.data).changedKeys().hasOnly(['currentProgress','updatedAt','examType','correctAnswers','totalQuestions']) &&
            request.resource.data.currentProgress is number &&
            resource.data.currentProgress is number &&
            request.resource.data.currentProgress >= resource.data.currentProgress
          ) ||
          // (2) Tamamlamayı aynı yazımda işaretleme
          (
            request.resource.data.diff(resource.data).changedKeys().hasOnly(['currentProgress','updatedAt','isCompleted','completionDate','examType','correctAnswers','totalQuestions']) &&
            request.resource.data.isCompleted == true &&
            request.resource.data.currentProgress is number &&
            resource.data.goalValue is number &&
            request.resource.data.currentProgress >= resource.data.currentProgress &&
            request.resource.data.currentProgress >= resource.data.goalValue
          ) ||
          // (3) Ödül talebi (tamamlandıktan sonra tek seferlik)
          (
            request.resource.data.diff(resource.data).changedKeys().hasOnly(['rewardClaimed','rewardClaimedAt','claimedAt','actualReward','updatedAt']) &&
            resource.data.currentProgress is number &&
            resource.data.goalValue is number &&
            resource.data.currentProgress >= resource.data.goalValue &&
            (resource.data.rewardClaimed == false || !(resource.data.rewardClaimed == true)) &&
            request.resource.data.rewardClaimed == true
          )
        );
      }

      match /weekly_quests/{questId} {
        allow read: if request.auth.uid == userId;
        allow create, delete: if false;
        allow update: if request.auth.uid == userId && (
          (
            request.resource.data.diff(resource.data).changedKeys().hasOnly(['currentProgress','updatedAt','examType','correctAnswers','totalQuestions']) &&
            request.resource.data.currentProgress is number &&
            resource.data.currentProgress is number &&
            request.resource.data.currentProgress >= resource.data.currentProgress
          ) ||
          (
            request.resource.data.diff(resource.data).changedKeys().hasOnly(['currentProgress','updatedAt','isCompleted','completionDate','examType','correctAnswers','totalQuestions']) &&
            request.resource.data.isCompleted == true &&
            request.resource.data.currentProgress is number &&
            resource.data.goalValue is number &&
            request.resource.data.currentProgress >= resource.data.currentProgress &&
            request.resource.data.currentProgress >= resource.data.goalValue
          ) ||
          (
            request.resource.data.diff(resource.data).changedKeys().hasOnly(['rewardClaimed','rewardClaimedAt','claimedAt','actualReward','updatedAt']) &&
            resource.data.currentProgress is number &&
            resource.data.goalValue is number &&
            resource.data.currentProgress >= resource.data.goalValue &&
            (resource.data.rewardClaimed == false || !(resource.data.rewardClaimed == true)) &&
            request.resource.data.rewardClaimed == true
          )
        );
      }

      match /monthly_quests/{questId} {
        allow read: if request.auth.uid == userId;
        allow create, delete: if false;
        allow update: if request.auth.uid == userId && (
          (
            request.resource.data.diff(resource.data).changedKeys().hasOnly(['currentProgress','updatedAt','examType','correctAnswers','totalQuestions']) &&
            request.resource.data.currentProgress is number &&
            resource.data.currentProgress is number &&
            request.resource.data.currentProgress >= resource.data.currentProgress
          ) ||
          (
            request.resource.data.diff(resource.data).changedKeys().hasOnly(['currentProgress','updatedAt','isCompleted','completionDate','examType','correctAnswers','totalQuestions']) &&
            request.resource.data.isCompleted == true &&
            request.resource.data.currentProgress is number &&
            resource.data.goalValue is number &&
            request.resource.data.currentProgress >= resource.data.currentProgress &&
            request.resource.data.currentProgress >= resource.data.goalValue
          ) ||
          (
            request.resource.data.diff(resource.data).changedKeys().hasOnly(['rewardClaimed','rewardClaimedAt','claimedAt','actualReward','updatedAt']) &&
            resource.data.currentProgress is number &&
            resource.data.goalValue is number &&
            resource.data.currentProgress >= resource.data.goalValue &&
            (resource.data.rewardClaimed == false || !(resource.data.rewardClaimed == true)) &&
            request.resource.data.rewardClaimed == true
          )
        );
      }

      match /state/{docId} {
        allow read, write: if request.auth.uid == userId;
      }

      match /plans/{docId} {
        allow read, write: if request.auth.uid == userId;
      }

      match /performance/{docId} {
        allow read, write: if request.auth.uid == userId;
        match /masteredTopics/{masteredTopicId} {
          allow read, write: if request.auth.uid == userId;
        }
      }

      match /topic_performance/{topicId} {
        allow read, write: if request.auth.uid == userId;
      }

      match /savedWorkshops/{workshopId} {
        allow read, write: if request.auth.uid == userId;
      }

      match /user_activity/{activityId} {
        allow read, create: if request.auth.uid == userId;
        allow update: if request.auth.uid == userId && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['practiceVolume', 'focusMinutes', 'date', 'dateKey', 'updatedAt']);
        allow delete: if false;

        match /visits/{visitId} {
          allow read, create: if request.auth.uid == userId;
          allow update, delete: if false;
        }

        match /completed_tasks/{taskId} {
          allow read, create, delete: if request.auth.uid == userId;
          allow update: if false;
        }
      }

      match /devices/{deviceId} {
        allow read: if request.auth.uid == userId;
        allow create, update, delete: if false;
      }

      match /in_app_notifications/{notifId} {
        allow read: if request.auth.uid == userId;
        allow update: if request.auth.uid == userId
          && request.resource.data.read == true
          && resource.data.read == false
          && request.resource.data.diff(resource.data).changedKeys().hasOnly(['read','readAt']);
        allow delete: if request.auth.uid == userId;
      }

      match /followers/{followerId} {
        allow read, list: if request.auth != null;
        allow create: if request.auth != null && request.auth.uid == followerId;
        allow delete: if request.auth != null && request.auth.uid == followerId;
      }

      match /following/{followingId} {
        allow read, list: if request.auth != null;
        allow create: if request.auth != null && request.auth.uid == userId;
        allow delete: if request.auth != null && request.auth.uid == userId;
      }
    }

    // =====================================================================
    // PUBLIC PROFILES - GÜVENLİK DÜZELTMESİ
    // =====================================================================
    match /public_profiles/{userId} {
      // Herkese açık profilleri tüm giriş yapmış kullanıcılar okuyabilir.
      allow read, list: if request.auth != null;
      // GÜVENLİK AÇIĞI KAPATILDI: Kullanıcılar sadece kendi herkese açık profillerini oluşturabilir veya güncelleyebilir.
      // Veri senkronizasyonu Cloud Function tarafından yapılır.
      allow write: if false;
      // Profillerin silinmesine istemci tarafından izin verilmez.
      allow delete: if false;
    }

    // =====================================================================
    // LİDERLİK TABLOSU KOLEKSİYONU (/leaderboards)
    // =====================================================================
    match /leaderboards/{examType}/users/{userId} {
      allow read: if request.auth != null;
      allow write: if false;
      allow delete: if false;
    }

    // =====================================================================
    // YENİ LİDERLİK TABLOSU YAPISI
    // =====================================================================
    match /leaderboard_top/{examType}/{period}/{docId} {
      allow read, list: if request.auth != null;
      allow write: if false;
    }

    match /leaderboard_scores/{examType}/{kind}/{periodId} {
      allow read, write: if false;
      match /users/{userId} {
        allow read, write: if false;
      }
    }

    match /leaderboard_exams/{examType} {
      allow read, write: if false;
    }

    // YENİ: Liderlik tablosu anlık görüntüleri (optimize edilmiş)
    match /leaderboard_snapshots/{snapshotId} {
      // GÜVENLİK GÜNCELLEMESİ: Liderlik tablolarını yalnızca, kendi profillerinde
      // aynı sınav türünü seçmiş olan kullanıcılar okuyabilir.
      // `snapshotId` formatı: `{examType}_{period}` (örn: "TYT_daily").
      allow read, list: if request.auth != null &&
                           get(/databases/$(database)/documents/users/$(request.auth.uid)).data.selectedExam == snapshotId.split('_')[0];
      allow write: if false; // Sadece sunucu yazmalı
    }

    // =====================================================================
    // TESTLER
    // =====================================================================
    match /tests/{testId} {
      allow read: if request.auth.uid == resource.data.userId;
      allow create, update, delete: if false;
    }

    match /focusSessions/{sessionId} {
      allow read, delete: if request.auth.uid == resource.data.userId;
      allow create: if request.auth.uid == request.resource.data.userId;
    }

    match /analytics_events/{eventId} {
      allow create: if request.auth.uid != null;
      allow read, update, delete: if false;
    }

    // =====================================================================
    // BLOG: /posts koleksiyonu
    // =====================================================================
    match /posts/{postId} {
      allow read: if resource.data.status == 'published' &&
                  resource.data.publishedAt is timestamp &&
                  resource.data.publishedAt <= request.time;
      allow list: if true;
      allow create, update, delete: if request.auth != null && request.auth.token.admin == true;
    }

    // ======================
    // SORU BİLDİRİMLERİ
    // ======================
    match /questionReports/{reportId} {
      allow create: if request.auth != null;
      allow read, update, delete: if request.auth != null && request.auth.token.admin == true;
    }

    match /question_report_index/{docId} {
      allow read: if request.auth != null && request.auth.token.admin == true;
      allow write: if false;
    }

    // ======================
    // PUSH KAMPANYALARI
    // ======================
    match /push_campaigns/{campaignId} {
      allow read: if request.auth != null && request.auth.token.admin == true;
      allow write: if false;
      match /logs/{logId} {
        allow read: if request.auth != null && request.auth.token.admin == true;
        allow write: if false;
      }
    }

    // ======================
    // PROMPTS
    // ======================
    match /prompts/{promptId} {
      allow read, list: if request.auth != null;
      allow create, update, delete: if request.auth != null && request.auth.token.admin == true;
    }

    // =====================================================================
    // CONFIGURATION (/config)
    // =====================================================================
    match /config/{docId} {
      // Bu koleksiyona istemci tarafından erişilemez.
      // Sadece sunucu (admin SDK) erişebilir.
      allow read, write: if false;
    }

    // =====================================================================
    // ADMIN LOGS (/admin_logs)
    // =====================================================================
    match /admin_logs/{logId} {
      // Sadece adminler okuyabilir.
      allow read: if request.auth != null && request.auth.token.admin == true;
      // İstemci tarafından yazılamaz.
      allow write: if false;
    }

    // =====================================================================
    // COLLECTION GROUP QUERIES
    // =====================================================================
    match /{path=**}/completed_tasks/{taskId} {
      // Kullanıcının kendi tamamladığı görevleri okumasına izin ver.
      allow read: if request.auth.uid == resource.data.userId;
    }
  }
}
