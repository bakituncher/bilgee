rules_version = '2';

service cloud.firestore {
  // --- Helper Functions for Schema Validation ---

  function isValidUserCreate(data) {
    // Gerekli alanlar ve türleri
    let requiredKeys = ['id', 'email', 'firstName', 'lastName', 'username', 'profileCompleted', 'tutorialCompleted', 'isAdmin'];
    let stringKeys = ['id', 'email', 'firstName', 'lastName', 'username'];
    let boolKeys = ['profileCompleted', 'tutorialCompleted', 'isAdmin'];

    // İzin verilen opsiyonel alanlar ve türleri
    let optionalStringKeys = ['gender', 'goal', 'selectedExam', 'selectedExamSection', 'avatarStyle', 'avatarSeed'];
    let optionalTimestampKeys = ['dateOfBirth'];
    let optionalNumberKeys = ['weeklyStudyGoal'];
    let optionalListKeys = ['challenges'];

    let allAllowedKeys = requiredKeys.concat(optionalStringKeys).concat(optionalTimestampKeys).concat(optionalNumberKeys).concat(optionalListKeys);

    return data.keys().hasAll(requiredKeys) &&
           data.keys().hasOnly(allAllowedKeys) &&
           // Gerekli alanların tür kontrolü
           (data.id is string && data.id == request.auth.uid) &&
           data.email is string &&
           data.firstName is string &&
           data.lastName is string &&
           (data.username is string && data.username.size() > 2 && data.username.size() < 25) &&
           data.profileCompleted is bool &&
           data.tutorialCompleted is bool &&
           // Güvenlik: isAdmin oluşturulurken false olmalı
           data.isAdmin == false &&
           // Opsiyonel alanların tür kontrolü
           (data.get('gender', '') is string) &&
           (data.get('goal', '') is string) &&
           (data.get('selectedExam', '') is string) &&
           (data.get('selectedExamSection', '') is string) &&
           (data.get('avatarStyle', '') is string) &&
           (data.get('avatarSeed', '') is string) &&
           (data.get('dateOfBirth', timestamp.date(1900,1,1)) is timestamp) &&
           (data.get('weeklyStudyGoal', 0.0) is number) &&
           (data.get('challenges', []) is list);
  }

  function isValidUserUpdate(request, resource) {
    let data = request.resource.data;
    let oldData = resource.data;
    // Güncellenmesine izin verilen alanlar
    let updatableFields = [
      'name', 'firstName', 'lastName', 'username', 'gender', 'dateOfBirth',
      'goal', 'challenges', 'weeklyStudyGoal', 'profileCompleted',
      'tutorialCompleted', 'selectedExam', 'selectedExamSection',
      'weeklyAvailability', 'avatarStyle', 'avatarSeed', 'updatedAt'
    ];

    return
      // Değiştirilemez alanların kontrolü
      data.email == oldData.email &&
      data.isAdmin == oldData.isAdmin &&
      // Yalnızca izin verilen alanların güncellendiğinden emin ol
      request.resource.data.diff(resource.data).affectedKeys().hasOnly(updatableFields) &&
      // Güncellenen alanların tür kontrolü
      (data.username is string && data.username.size() > 2 && data.username.size() < 25) &&
      (data.firstName is string) && (data.lastName is string) && (data.name is string) &&
      (data.gender is string) &&
      (data.dateOfBirth is timestamp) &&
      (data.goal is string) &&
      (data.challenges is list) &&
      (data.weeklyStudyGoal is number) &&
      (data.profileCompleted is bool) &&
      (data.tutorialCompleted is bool) &&
      (data.selectedExam is string) &&
      (data.selectedExamSection is string) &&
      (data.weeklyAvailability is map) &&
      (data.avatarStyle is string) &&
      (data.avatarSeed is string);
  }

  match /databases/{database}/documents {

    // =====================================================================
    // KULLANICI KOLEKSİYONU (/users) - KULLANICI ARAMA İÇİN GÜNCELLENDİ
    // =====================================================================
    match /users/{userId} {
      // Sadece kullanıcı kendi profilini okuyabilir.
      // Diğer kullanıcıların genel profil bilgileri için "public_profiles" koleksiyonu kullanılır.
      allow read: if request.auth.uid == userId;

      // YAZMA İZNİ - Kullanıcı kendi verilerini, şema doğrulaması ile yazabilir
      allow create: if request.auth.uid == userId && isValidUserCreate(request.resource.data);
      allow update: if request.auth.uid == userId && isValidUserUpdate(request, resource);
      // Kullanıcı silme işlemi istemci tarafından yapılamaz.
      allow delete: if false;


      // --- ALT KOLEKSİYONLAR (GÜVENLİK GÜÇLENDİRİLDİ) ---
      function isValidQuestUpdate(request, resource) {
        return request.resource.data.diff(resource.data).affectedKeys()
               .hasOnly(['progress', 'isCompleted', 'completedAt', 'rewardClaimed', 'rewardClaimedAt', 'actualReward']);
      }

      match /daily_quests/{questId} {
        allow read: if request.auth.uid == userId;
        allow update: if request.auth.uid == userId && isValidQuestUpdate(request, resource);
        allow create, delete: if false;
      }
      match /weekly_quests/{questId} {
        allow read: if request.auth.uid == userId;
        allow update: if request.auth.uid == userId && isValidQuestUpdate(request, resource);
        allow create, delete: if false;
      }
      match /monthly_quests/{questId} {
        allow read: if request.auth.uid == userId;
        allow update: if request.auth.uid == userId && isValidQuestUpdate(request, resource);
        allow create, delete: if false;
      }

      match /state/{docId} {
        allow read: if request.auth.uid == userId;
        allow update: if request.auth.uid == userId && (docId == 'app_state' && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['tutorialCompleted', 'updatedAt']));
        allow create, delete: if false;
      }

      match /plans/{docId} {
        allow read: if request.auth.uid == userId;
        allow create: if request.auth.uid == userId;
        allow update: if request.auth.uid == userId && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['studyPacing', 'weeklyPlan', 'updatedAt']);
        allow delete: if false;
      }

      match /performance/{docId} {
        allow read: if request.auth.uid == userId;
        allow write: if false;
        match /masteredTopics/{masteredTopicId} {
          allow read: if request.auth.uid == userId;
          allow write: if false;
        }
      }

      match /topic_performance/{topicId} {
        allow read: if request.auth.uid == userId;
        allow write: if false;
      }

      match /savedWorkshops/{workshopId} {
        allow read, create, delete: if request.auth.uid == userId;
        allow update: if false;
      }

      match /user_activity/{activityId} {
        allow read: if request.auth.uid == userId;
        allow create: if request.auth.uid == userId;
        allow update: if request.auth.uid == userId && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['practiceVolume', 'visits', 'focusMinutes', 'completedTasks', 'date', 'dateKey', 'updatedAt']);
        allow delete: if false;
      }

      match /devices/{deviceId} {
        allow read, write: if request.auth.uid == userId;
      }

      match /in_app_notifications/{notifId} {
        allow read: if request.auth.uid == userId;
        allow update: if request.auth.uid == userId
          && request.resource.data.read == true
          && resource.data.read == false;
        allow delete: if request.auth.uid == userId;
      }

      match /followers/{followerId} {
        allow read, list: if request.auth != null;
        allow create: if request.auth != null && request.auth.uid == followerId;
        allow delete: if request.auth != null && request.auth.uid == followerId;
      }

      match /following/{followingId} {
        allow read, list: if request.auth != null;
        allow create: if request.auth != null && request.auth.uid == userId;
        allow delete: if request.auth != null && request.auth.uid == userId;
      }
    }

    // =====================================================================
    // PUBLIC PROFILES - KULLANICI ARAMA İÇİN
    // =====================================================================
    match /public_profiles/{userId} {
      allow read, list: if request.auth != null;
      // YAZMA İZNİ KALDIRILDI: Bu koleksiyon yalnızca Cloud Function tarafından güncellenmelidir.
      allow create, update: if false;
      allow delete: if false;
    }

    // =====================================================================
    // LİDERLİK TABLOSU KOLEKSİYONU (/leaderboards)
    // =====================================================================
    match /leaderboards/{examType}/users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId;
      allow delete: if request.auth.uid == userId;
    }

    // =====================================================================
    // YENİ LİDERLİK TABLOSU YAPISI
    // =====================================================================
    match /leaderboard_top/{examType}/{period}/{docId} {
      allow read, list: if request.auth != null;
      allow write: if false;
    }

    match /leaderboard_scores/{examType}/{kind}/{periodId} {
      allow read, write: if false;
      match /users/{userId} {
        allow read, write: if false;
      }
    }

    match /leaderboard_exams/{examType} {
      allow read, write: if false;
    }

    // YENİ: Liderlik tablosu anlık görüntüleri (optimize edilmiş)
    match /leaderboard_snapshots/{snapshotId} {
      // KALICI KURAL: Eski hali request.auth.uid != null idi ve authenticated olmayan istemciler için PERMISSION_DENIED veriyordu.
      // HIZLI DÜZELTME: Bu koleksiyonu herkese açık yapıyoruz. Eğer güvenlik gerekiyorsa daha ince yetkilendirme ekleyin.
      allow read, list: if request.auth != null;
      allow write: if false; // Sadece sunucu yazmalı
    }

    // =====================================================================
    // TESTLER
    // =====================================================================
    match /tests/{testId} {
      allow read: if request.auth.uid == resource.data.userId;
      allow create, update, delete: if false;
    }

    match /focusSessions/{sessionId} {
      allow read, delete: if request.auth.uid == resource.data.userId;
      allow create: if request.auth.uid == request.resource.data.userId;
    }

    match /analytics_events/{eventId} {
      allow create: if request.auth.uid != null;
      allow read, update, delete: if false;
    }

    // =====================================================================
    // BLOG: /posts koleksiyonu
    // =====================================================================
    match /posts/{postId} {
      allow read: if resource.data.status == 'published' &&
                  resource.data.publishedAt is timestamp &&
                  resource.data.publishedAt <= request.time;
      allow list: if true;
      allow create, update, delete: if request.auth != null && request.auth.token.admin == true;
    }

    // ======================
    // SORU BİLDİRİMLERİ
    // ======================
    match /questionReports/{reportId} {
      allow create: if request.auth != null;
      allow read, update, delete: if request.auth != null && request.auth.token.admin == true;
    }

    match /question_report_index/{docId} {
      allow read: if request.auth != null && request.auth.token.admin == true;
      allow write: if false;
    }

    // ======================
    // PUSH KAMPANYALARI
    // ======================
    match /push_campaigns/{campaignId} {
      allow read: if request.auth != null && request.auth.token.admin == true;
      allow write: if false;
      match /logs/{logId} {
        allow read: if request.auth != null && request.auth.token.admin == true;
        allow write: if false;
      }
    }

    // ======================
    // PROMPTS
    // ======================
    match /prompts/{promptId} {
      allow read, list: if request.auth != null;
      allow create, update, delete: if request.auth != null && request.auth.token.admin == true;
    }
  }
}
