rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =====================================================================
    // SÜPER ADMİN YETKİLENDİRMESİ
    // =====================================================================
    match /config/super_admins {
      allow read, write: if request.auth.token.email == 'tuncerbaki627@gmail.com';
    }

    // =====================================================================
    // KULLANICI KOLEKSİYONU (/users) - KULLANICI ARAMA İÇİN GÜNCELLENDİ
    // =====================================================================
    match /users/{userId} {
      // Kullanıcı kendi profilini tamamen okuyabilir VE
      // KULLANICI ARAMA İÇİN: Giriş yapmış kullanıcılar temel profil bilgilerini okuyabilir
      allow read: if request.auth.uid == userId
        || (request.auth != null && resource != null);

      // YAZMA İZNİ - Kullanıcı kendi verilerini yazabilir
      allow write: if request.auth != null && request.auth.uid == userId;

      // Takip sayaçları için yazma izni (followerCount, followingCount)
      allow update: if request.auth != null
        && request.resource.data.diff(resource.data).affectedKeys()
        .hasOnly(['followerCount', 'followingCount', 'updatedAt']);

      // --- ALT KOLEKSİYONLAR ---
      match /daily_quests/{questId} {
        allow read, write: if request.auth.uid == userId;
      }

      match /weekly_quests/{questId} {
        allow read, write: if request.auth.uid == userId;
      }

      match /monthly_quests/{questId} {
        allow read, write: if request.auth.uid == userId;
      }

      match /state/{docId} {
        allow read, write: if request.auth.uid == userId;
      }

      match /plans/{docId} {
        allow read, write: if request.auth.uid == userId;
      }

      match /performance/{docId} {
        allow read, write: if request.auth.uid == userId;
        match /masteredTopics/{masteredTopicId} {
          allow read, write: if request.auth.uid == userId;
        }
      }

      match /topic_performance/{topicId} {
        allow read, write: if request.auth.uid == userId;
      }

      match /savedWorkshops/{workshopId} {
        allow read, write: if request.auth.uid == userId;
      }

      match /user_activity/{activityId} {
        allow read, create: if request.auth.uid == userId;
        // visits ve completedTasks artık alt koleksiyon olduğu için buradan kaldırıldı.
        allow update: if request.auth.uid == userId && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['practiceVolume', 'focusMinutes', 'date', 'dateKey', 'updatedAt']);
        allow delete: if false;

        match /visits/{visitId} {
          allow read, create: if request.auth.uid == userId;
          allow update, delete: if false;
        }

        match /completed_tasks/{taskId} {
          allow read, create, delete: if request.auth.uid == userId;
          allow update: if false;
        }
      }

      match /devices/{deviceId} {
        allow read, write: if request.auth.uid == userId;
      }

      match /in_app_notifications/{notifId} {
        allow read: if request.auth.uid == userId;
        allow update: if request.auth.uid == userId
          && request.resource.data.read == true
          && resource.data.read == false;
        allow delete: if request.auth.uid == userId;
      }

      match /followers/{followerId} {
        allow read, list: if request.auth != null;
        allow create: if request.auth != null && request.auth.uid == followerId;
        allow delete: if request.auth != null && request.auth.uid == followerId;
      }

      match /following/{followingId} {
        allow read, list: if request.auth != null;
        allow create: if request.auth != null && request.auth.uid == userId;
        allow delete: if request.auth != null && request.auth.uid == userId;
      }
    }

    // =====================================================================
    // PUBLIC PROFILES - KULLANICI ARAMA İÇİN
    // =====================================================================
    match /public_profiles/{userId} {
      allow read, list: if request.auth != null;
      allow create, update: if request.auth != null;
      allow delete: if false;
    }

    // =====================================================================
    // LİDERLİK TABLOSU KOLEKSİYONU (/leaderboards)
    // =====================================================================
    match /leaderboards/{examType}/users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId;
      allow delete: if request.auth.uid == userId;
    }

    // =====================================================================
    // YENİ LİDERLİK TABLOSU YAPISI
    // =====================================================================
    match /leaderboard_top/{examType}/{period}/{docId} {
      allow read, list: if request.auth != null;
      allow write: if false;
    }

    match /leaderboard_scores/{examType}/{kind}/{periodId} {
      allow read, write: if false;
      match /users/{userId} {
        allow read, write: if false;
      }
    }

    match /leaderboard_exams/{examType} {
      allow read, write: if false;
    }

    // YENİ: Liderlik tablosu anlık görüntüleri (optimize edilmiş)
    match /leaderboard_snapshots/{snapshotId} {
      // KALICI KURAL: Eski hali request.auth.uid != null idi ve authenticated olmayan istemciler için PERMISSION_DENIED veriyordu.
      // HIZLI DÜZELTME: Bu koleksiyonu herkese açık yapıyoruz. Eğer güvenlik gerekiyorsa daha ince yetkilendirme ekleyin.
      allow read, list: if request.auth != null;
      allow write: if false; // Sadece sunucu yazmalı
    }

    // =====================================================================
    // TESTLER
    // =====================================================================
    match /tests/{testId} {
      allow read: if request.auth.uid == resource.data.userId;
      allow create, update, delete: if false;
    }

    match /focusSessions/{sessionId} {
      allow read, delete: if request.auth.uid == resource.data.userId;
      allow create: if request.auth.uid == request.resource.data.userId;
    }

    match /analytics_events/{eventId} {
      allow create: if request.auth.uid != null;
      allow read, update, delete: if false;
    }

    // =====================================================================
    // BLOG: /posts koleksiyonu
    // =====================================================================
    match /posts/{postId} {
      allow read: if resource.data.status == 'published' &&
                  resource.data.publishedAt is timestamp &&
                  resource.data.publishedAt <= request.time;
      allow list: if true;
      allow create, update, delete: if request.auth != null && request.auth.token.admin == true;
    }

    // ======================
    // SORU BİLDİRİMLERİ
    // ======================
    match /questionReports/{reportId} {
      allow create: if request.auth != null;
      allow read, update, delete: if request.auth != null && request.auth.token.admin == true;
    }

    match /question_report_index/{docId} {
      allow read: if request.auth != null && request.auth.token.admin == true;
      allow write: if false;
    }

    // ======================
    // PUSH KAMPANYALARI
    // ======================
    match /push_campaigns/{campaignId} {
      allow read: if request.auth != null && request.auth.token.admin == true;
      allow write: if false;
      match /logs/{logId} {
        allow read: if request.auth != null && request.auth.token.admin == true;
        allow write: if false;
      }
    }

    // ======================
    // PROMPTS
    // ======================
    match /prompts/{promptId} {
      allow read, list: if request.auth != null;
      allow create, update, delete: if request.auth != null && request.auth.token.admin == true;
    }
  }
}
